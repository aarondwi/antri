// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntriClient is the client API for Antri service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntriClient interface {
	AddTasks(ctx context.Context, in *AddTasksRequest, opts ...grpc.CallOption) (*OkResponse, error)
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error)
	AddTask(ctx context.Context, in *CommitTasksRequest, opts ...grpc.CallOption) (*OkResponse, error)
}

type antriClient struct {
	cc grpc.ClientConnInterface
}

func NewAntriClient(cc grpc.ClientConnInterface) AntriClient {
	return &antriClient{cc}
}

func (c *antriClient) AddTasks(ctx context.Context, in *AddTasksRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, "/Antri/AddTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antriClient) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error) {
	out := new(GetTasksResponse)
	err := c.cc.Invoke(ctx, "/Antri/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antriClient) AddTask(ctx context.Context, in *CommitTasksRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, "/Antri/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntriServer is the server API for Antri service.
// All implementations must embed UnimplementedAntriServer
// for forward compatibility
type AntriServer interface {
	AddTasks(context.Context, *AddTasksRequest) (*OkResponse, error)
	GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error)
	AddTask(context.Context, *CommitTasksRequest) (*OkResponse, error)
	mustEmbedUnimplementedAntriServer()
}

// UnimplementedAntriServer must be embedded to have forward compatible implementations.
type UnimplementedAntriServer struct {
}

func (UnimplementedAntriServer) AddTasks(context.Context, *AddTasksRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTasks not implemented")
}
func (UnimplementedAntriServer) GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedAntriServer) AddTask(context.Context, *CommitTasksRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedAntriServer) mustEmbedUnimplementedAntriServer() {}

// UnsafeAntriServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntriServer will
// result in compilation errors.
type UnsafeAntriServer interface {
	mustEmbedUnimplementedAntriServer()
}

func RegisterAntriServer(s grpc.ServiceRegistrar, srv AntriServer) {
	s.RegisterService(&Antri_ServiceDesc, srv)
}

func _Antri_AddTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntriServer).AddTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Antri/AddTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntriServer).AddTasks(ctx, req.(*AddTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Antri_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntriServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Antri/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntriServer).GetTasks(ctx, req.(*GetTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Antri_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntriServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Antri/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntriServer).AddTask(ctx, req.(*CommitTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Antri_ServiceDesc is the grpc.ServiceDesc for Antri service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Antri_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Antri",
	HandlerType: (*AntriServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTasks",
			Handler:    _Antri_AddTasks_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _Antri_GetTasks_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _Antri_AddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antri.proto",
}
